# -*- coding: utf-8 -*-
"""Indian_cars(Week 6).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y2aX4Hgz0J8LQY9ra-MTGL8bklshbcC7
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

car_df = pd.read_csv('/content/cars_ds_final.csv')

car_df.head()

car_df.columns

car_df.dtypes

car_df.shape

car_df.info(verbose =True)

car_df.isna().sum()

car_df = car_df.drop('Unnamed: 0', axis = 1)

car_df = car_df.rename(columns = {'Make':'Company'})

car_df['Company'].isnull().value_counts()

car_df = car_df.dropna(subset = ['Company'])
car_df['Company'].isnull().value_counts()

car_df = car_df.rename(columns = {'Ex-Showroom_Price' : 'Price'})

car_df['Price'] = car_df['Price'].str.replace('Rs.','')
car_df['Price'] = car_df['Price'].str.replace(',','')
car_df['Price']

car_df['Price'] = car_df['Price'].astype(int)

car_df['Displacement'].isnull().value_counts()

car_df = car_df.dropna(subset=['Displacement'])
car_df['Displacement'].isnull().value_counts()

car_df['Cylinders'].isna().sum()

car_df['Cylinders'] = car_df['Cylinders'].replace(np.nan, car_df.Cylinders.median())

car_df['Cylinders'] = car_df['Cylinders'].astype(int)

car_df['Cylinders'].isna().sum()

car_df['Fuel_System'].isna().sum()

car_df = car_df.dropna(subset=['Fuel_System'])
car_df['Fuel_System'].isnull().value_counts()

car_df['Fuel_Tank_Capacity'].isnull().sum()

car_df.Fuel_Tank_Capacity.info

car_df['Fuel_Tank_Capacity'] = car_df['Fuel_Tank_Capacity'].str.strip('litres')

car_df['Fuel_Tank_Capacity'] = car_df['Fuel_Tank_Capacity'].replace(np.nan, car_df.Fuel_Tank_Capacity.median())

car_df['Fuel_Tank_Capacity'] = car_df['Fuel_Tank_Capacity'].astype(float)

car_df.City_Mileage.info

car_df['City_Mileage'].unique()

car_df['City_Mileage'].isnull().value_counts()

car_df['City_Mileage'] = car_df['City_Mileage'].str.strip('Km/litre')

car_df['City_Mileage'] = car_df['City_Mileage'].str.replace('?','')

car_df['City_Mileage'].unique()

car_df['City_Mileage'] = car_df['City_Mileage'].str.replace('12.5-12.7','12.5')

car_df['City_Mileage'] = car_df['City_Mileage'].str.replace(',','.')

car_df['City_Mileage'] = car_df['City_Mileage'].str.replace('k','')

car_df['City_Mileage'] = car_df['City_Mileage'].astype(float)

car_df['City_Mileage'] = car_df['City_Mileage'].replace(np.nan, car_df.City_Mileage.median())

car_df['City_Mileage']

car_df = car_df.dropna(subset=['City_Mileage'])
car_df['City_Mileage'].isnull().value_counts()

car_df['Seating_Capacity'].info()

car_df['Seating_Capacity'].isnull().value_counts()

car_df = car_df.dropna(subset=['Seating_Capacity'])
car_df['Seating_Capacity'].isnull().value_counts()

car_df['Seating_Capacity'] = car_df['Seating_Capacity'].replace(np.nan, car_df.Seating_Capacity.median())

car_df['Seating_Capacity'] = car_df['Seating_Capacity'].astype(int)

car_df['USB_Ports'].fillna(0, inplace=True)

car_df['Emission_Norm'].isna().sum()

car_df.dropna(subset=['Emission_Norm'])
car_df.head()

car_df.Child_Safety_Locks.info()

car_df.Child_Safety_Locks

car_df.Child_Safety_Locks.unique()

car_df['Child_Safety_Locks'] = car_df['Child_Safety_Locks'].replace(np.nan, 'No')

car_df.Basic_Warranty.isnull().value_counts()

car_df['Basic_Warranty'] = car_df['Basic_Warranty'].str.split('Years').str[0].str.strip()

car_df['Basic_Warranty'] = car_df['Basic_Warranty'].str.extract('(\d+)').astype(float)

car_df['Basic_Warranty'] = car_df['Basic_Warranty'].replace(np.nan, car_df.Basic_Warranty.median())

car_df['Basic_Warranty'] = car_df['Basic_Warranty'].astype(int)

car_df.Number_of_Airbags.info

car_df.Number_of_Airbags.unique()

car_df['Number_of_Airbags'] = car_df['Number_of_Airbags'].replace(np.nan, car_df.Number_of_Airbags.median())

car_df['Number_of_Airbags'] = car_df['Number_of_Airbags'].astype(int)

car_df.Parking_Assistance.info

car_df.Parking_Assistance.unique()

car_df.Parking_Assistance.isnull().value_counts()

car_df['Parking_Assistance'] = car_df['Parking_Assistance'].replace(np.nan, 'No')

car_df

"""## Univariate analysis

---

# Histogram
"""

plt.ticklabel_format(style = 'plain')
sns.histplot(car_df['Price'], kde = True, color = 'blue')
# Adding labels and title
plt.xlabel('Price')
plt.title('Histogram')

# Display the plot
plt.show()

count_cars = car_df.Company.value_counts()
count_cars

"""# Countplot"""

plt.figure(figsize=(20,5))
sns.countplot(data= car_df, x='Company', order = car_df['Company'].value_counts().index)
plt.xlabel('Car Companies')
plt.ylabel('Count')
plt.title('Number of cars by company')
plt.xticks(rotation = 45)
plt.show()

"""# Histogram"""

plt.figure(figsize=(10, 4))
sns.histplot(car_df['Fuel_Tank_Capacity'], kde=True, color = 'mediumslateblue')

# Adding labels and title
plt.xlabel('Fuel Tank Capacity')
plt.ylabel('Frequency')
plt.title('Distribution of Fuel Tank Capacity')

# Display the plot
plt.show()

"""# Pie Charts"""

count = car_df['Company'].value_counts()
top_company = count.head(5)

model_count = car_df['Model'].value_counts()
top_model = model_count.head(5)

fig, axes = plt.subplots(1,2, figsize=(10,5))

axes[0].pie(top_company , labels = top_company.index, autopct = '%1.3f%%', colors= sns.color_palette('Set2'), startangle=90)
axes[0].set_title('Top 5 Car Company')

axes[1].pie(top_model , labels = top_model.index, autopct = '%1.3f%%',colors= sns.color_palette('Set2'), startangle=90)
axes[1].set_title('Top 5 Car Models')
plt.show()

"""# Bivariate analysis

---

# Scatter plot
"""

plt.figure(figsize=(8,6))
sns.scatterplot(x='Price', y='Cylinders', data = car_df, hue='Body_Type', palette='plasma', s = 120, alpha = 0.89)
plt.title('Relationship between Price and Cylinders')
plt.xlabel('Price')
plt.ylabel('Cylinders')
plt.legend(title='Body Type')
plt.show()

"""# Correlation Matrix"""

num_column = car_df.select_dtypes(include='number')
matrix = num_column.corr()

plt.figure(figsize =(8,6))
sns.heatmap(matrix, annot = True, cmap = 'Greens', fmt = '.2f', linewidths = 0.5)
plt.title('Correlation Matrix')
plt.show()

"""# Box plot"""

fig, ax = plt.subplots(figsize=(10,5))
sns.boxplot(x = 'Drivetrain', y = 'Price', data = car_df, hue = 'Drivetrain', ax = ax, palette = 'BuPu')
ax.set_title('Box plot')
plt.show()

"""# Violin Plot


"""

plt.figure(figsize=(10,4))
sns.violinplot(x = 'Company', y = 'Price', data = car_df.head(150), palette = 'plasma')
plt.show()

"""# Pair Plot"""

sns.pairplot(car_df, hue = 'Body_Type', vars = ['Number_of_Airbags','Seating_Capacity','Fuel_Tank_Capacity','City_Mileage'], height = 2)
plt.suptitle('Pair Plot', y = 1.5)
plt.show()

