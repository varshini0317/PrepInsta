# -*- coding: utf-8 -*-
"""Frog_Leap_Problem_Statement (Week 2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GJaWEbbwu_R8ZtK8eKs0NQG67aWzRJav

# Problem statement

Create famous 'Frog leap' puzzle game. Try completing the game before starting to get an idea about its working.
[Demonstration](https://www.neok12.com/games/leap-froggies/leap-froggies.htm).


### Rules ###
1. The left set of frogs can only move right, the right set of frogs can only move left.
2. Frogs can move forward one space, or move two spaces by jumping over another frog from opposite side.
3. The puzzle is solved when the two sets of frogs have switched positions.


## Steps to solve the problem:
### Step1:-
- Display green and brown frogs on the left and right sides initially.

Initial Display :-  
```
[ 0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ]
['G', 'G', 'G', '-', 'B', 'B', 'B']
```
<br>
Here 'G' represents Green frogs on the left side and 'B' represents brown frogs on the right side. The '-' defines the position of empty leaf.
(You can change display according to your imagination or convinience)

### Step2:-
Accept positions of the frog that you want to move.<br>
Example: If we enter position 2 then the game will look like this:-
```
[ 0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ]
['G', 'G', '-', 'G', 'B', 'B', 'B']
```

### Step3:- ###
Define Invalid moves and add conditional 'if' statements accordingly
#### Rules
1. Entered position should be between 0 to 6. Or a character 'q' to quit the game.
2. Entered position cannot be the position of empty leaf.
3. If the selected frog position cannot perform the contraints given in rule 2 then the move is invalid.

### Step4:-
Make the appropriate move by changing the game display.

## Step 1
First create a list `positions` which contains the characters 'G','B' and '-' in the same sequence as given in the initial display state.
"""

positions = ['G', 'G', 'G', '-', 'B', 'B', 'B']
print(positions)

"""Now print this string ```[ 0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ]``` and after that print the list `positions`"""

print("[ 0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ]")
print(positions)

"""Take position input from user and write a message as `"Press q to quit else \nEnter position of piece:"`."""

pos = input("Press q to quit \n Enter position of piece: ")

"""Now the taken input is in string format. So first check if the input is `'q'` character. If input is `'q'` then the person is quiting the game so print `'You Lose'`."""

if pos == 'q':
  print("You Lose")

"""Next if input character is not `'q'` then it has to be some integer. so convert input to integer format."""

pos = int(input())

"""## Step 2
Now we have to check validity of the selected positions or move.<br>
If the entered number isn't between 0 and 6, then print 'Invalid move'.
"""

### your code here

if pos < 0 or 6 < pos:
  print("Invalid Move")

"""A frog should be present on the selected position to make a move. If leaf is selected then it doesn't make sense. Therefore, if entered postition is same as the postition of empty leaf then the move is invalid and print `Invalid Move`"""

### your code here

if positions[pos] == '_':
  print("Invalid Move")

"""Initialize a variable named `pos2` at value 0, to store the index of empty leaf, so that we can use it later."""

### your code here

"""```   
    Check if the selected frog is 'G':
  
        (Inside if when it's 'G'. As 'G' is selected frog can move to right only.)
        
        ❗condition 1

        If **selected_position + 1** is less than or equal to 6 and **curent_position + 1** contains '-'
        then it's a valid move and store that postion in `pos2`.
        
        ❗condition2

        Else if **selected_position + 2** is less than or equal to 6 and if **current_position + 2**
        contains '-' and if **selected_position + 1** contains 'B' then it's a valid move  and store that postion in `pos2`.
        
        ❗condition3:

        Else remainig all are invalid, so print `Invalid Move`
      
```
"""

### your code here

"""```
    Check if the selected frog is 'B':
    
        (Inside if when it's 'B'. As 'B' is selected frog can move to left only.)
        
        ❗condition1:

        If **selected_position - 1** is more than or equal to 0 and **curent_position - 1** contains '-' then
        it's a valid move and and store that postion in `pos2`.
        
        ❗condition2:

        Else if **selected_position - 2** is more than or equal to 0 and if **current_position - 2** contains '-'
        and if **selected_position - 1** contains 'G' then it's a valid move and and store that postion in `pos2`.

        ❗condition3:
        
        Else remainig all are invalid,, so print `Invalid Move`.
        
```
"""

### your code here

"""Swap the element at selected positions and calculated position2 in the list.<br> So basically we are moving the frog to next valid position by swapping elelments of array."""

### your code here

"""Now print the display of the game again to see the change.<br>
If we enter position 2 then the output will look like this:-
```
[ 0 ,  1 ,  2 ,  3 ,  4 ,  5 ,  6 ]
['G', 'G', '-', 'G', 'B', 'B', 'B']
```
"""

### your code here

"""Check for winning condition by comparing the elements of list. If player has won the game print `'You Win'`"""

### your code here

"""Now the game should keep running until the player quits, so place all conditional statements inside an infinite loop.<br>

1. We have to `'break'` the loop if the player presses `'q'` and quits.

2. If the move made by player is `'Invalid Move'` then we have to `'continue'` without executing remaining part of the selected iteration.

3. If player wins the game we have to `break` the loop.


```
Infinite loop:
    (inside loop)
    1.Take input
    2.Check all valid and invalid conditions of `pos`.
    3.Make the appropriate move by calculating `pos2`.
    4.Display game
    4.Check winning condition
```

Below is a documented version of the provided code, including explanations for each function and variable:
"""

# Step 1: Initialize the positions list
positions = ['G', 'G', 'G', '-', 'B', 'B', 'B']

# Step 2: Display the initial state of the game
print("[ 0 , 1 , 2 , 3 , 4 , 5 , 6 ]")
print(positions)

# Game Loop
while True:
    # Step 3: Take input from the user
    move = input("Press 'q' to quit. Enter position of piece: ")

    # Step 4: Check if the user wants to quit
    if move.lower() == 'q':
        print("You Lose")
        break  # Exit the loop if the user quits

    # Step 5: Convert input to an integer
    move = int(move)

    # Step 6: Check for valid move
    if move < 0 or move > 6:
        print("Invalid move")
        continue  # Continue to the next iteration if the move is invalid

    # Step 7: Check if the selected position contains a frog
    if positions[move] == '-':
        print("Invalid Move")
        continue  # Continue to the next iteration if the move is invalid

    # Step 8: Initialize a variable empty_index to store the index of the empty leaf
    empty_index = 0

    # Step 9: Check if the selected frog is 'G' (Green)
    if positions[move] == 'G':
        # Condition 1
        if move + 1 <= 6 and positions[move + 1] == '-':
            empty_index = move + 1
        # Condition 2
        elif move + 2 <= 6 and positions[move + 2] == '-' and positions[move + 1] == 'B':
            empty_index = move + 2
        else:
            print("Invalid Move")
            continue
    # Step 10: Check if the selected frog is 'B' (Brown)
    elif positions[move] == 'B':
        # Condition 1
        if move - 1 >= 0 and positions[move - 1] == '-':
            empty_index = move - 1
        # Condition 2
        elif move - 2 >= 0 and positions[move - 2] == '-' and positions[move - 1] == 'G':
            empty_index = move - 2
        else:
            print("Invalid Move")
            continue

    # Step 11: Swap the elements at the selected position and empty_index
    positions[move], positions[empty_index] = positions[empty_index], positions[move]

    # Step 12: Display the updated game state
    print("[ 0 , 1 , 2 , 3 , 4 , 5 , 6 ]")
    print(positions)

    # Step 13: Check for winning condition
    if positions == ['B', 'B', 'B', '-', 'G', 'G', 'G']:
        print("You Win!")
        break  # Exit the loop if the player wins

"""This code implements the Frog Leap puzzle game, including comments for each step to explain the purpose and function of the code. No external references or inspirations were used for this simple console-based game."""